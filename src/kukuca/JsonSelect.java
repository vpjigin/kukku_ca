/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kukuca;

import com.google.gson.Gson;
import java.util.List;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import kukuca.model.CAModel;
import kukuca.model.ItemDetails;
import kukuca.model.b2b;
import org.json.JSONObject;

/**
 *
 * @author Youtube
 */
public class JsonSelect extends javax.swing.JFrame {
    private DefaultTableModel dm;
    List<CAModel>caList;
    
    /**
     * Creates new form JsonSelect
     */
    public JsonSelect() {
        initComponents();
        
        ImageIcon icon = new ImageIcon("images/icon24.png");
        this.setIconImage(icon.getImage());
        
        caList = new ArrayList<>();
        createColoumn();
        
        JSONObject obj = new JSONObject();
        obj.put("booelanex", true);
        
        System.out.println(obj.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EASY CONVERT");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tick24.png"))); // NOI18N
        jButton1.setText("SELECT JSON FILES");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/download.png"))); // NOI18N
        jLabel3.setText("Export to excel");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        clearTableAndData();
        
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(this);
        File[] files = chooser.getSelectedFiles();
        
        caList = new ArrayList<>();
        
        for(File file : files){
            try{
                if(isJson(file.getName())){
                    String fileContent = getJsonString(file.getAbsolutePath());
                    CAModel caModel = new Gson().fromJson(fileContent, CAModel.class);
                    caList.add(caModel);

                    setTableData(file.getAbsolutePath()); 
                }else{
                    JOptionPane.showMessageDialog(this, file.getName()+" is not a json file!");
                    clearTableAndData();
                    return;
                }
            }catch (Exception e){
                clearTableAndData();
                System.out.println(e.toString());
                JOptionPane.showMessageDialog(this,"Invalid file format or Invalid json");
            }
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        Loading loading = new Loading();
        loading.setVisible(true);
        
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {

            public void run() {
                loading.setVisible(false);
                downloadXL();
                timer.cancel();
            }
        }, 3000, 1000);
        
    }//GEN-LAST:event_jLabel3MouseClicked
    
    public String getJsonString(String path) throws IOException{
        String data = "";
        FileReader fr= new FileReader(path);    
        int i;    
        while((i=fr.read())!=-1)    
            data += (char)i;    
        fr.close();
        
        return data;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JsonSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JsonSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JsonSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JsonSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JsonSelect().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void createColoumn() {
        dm = (DefaultTableModel) jTable1.getModel();
        
        dm.addColumn("Json File Name");
    }
    
    private void setTableData(String data) {
        String da[] = new String[]{data};
            
        dm.addRow(da);
        dm.fireTableDataChanged();
    }
    
    private void clearTableAndData(){
        caList.clear();
        dm.setRowCount(0);
    }
    
    private void downloadXL() {
       //file path
       try{
            WorkbookSettings wbSettings = new WorkbookSettings();
            wbSettings.setLocale(new Locale("en", "EN"));
            WritableWorkbook workbook;
            
            createDirIfNot();
            
            String fileName = createFileName();
            workbook = Workbook.createWorkbook(new File("D:\\CAFILE\\"+fileName+".xls"), wbSettings);

            //Excel sheet name. 0 represents first sheet
            WritableSheet sheet = workbook.createSheet("ACCOUNTS", 0);

            sheet.addCell(new Label(0, 0, "GST IN"));
            sheet.addCell(new Label(1, 0, "FP"));
            sheet.addCell(new Label(2, 0, "FILLING TYP"));
            sheet.addCell(new Label(3, 0, "GT"));
            sheet.addCell(new Label(4, 0, "CUR GT"));
            sheet.addCell(new Label(5, 0, "B2B CTIN"));
            sheet.addCell(new Label(6, 0, "SGST"));
            sheet.addCell(new Label(7, 0, "RATE"));
            sheet.addCell(new Label(8, 0, "TAXABLE VALUE"));
            sheet.addCell(new Label(9, 0, "CGST"));
            sheet.addCell(new Label(10, 0, "INVOICE VALUE"));
            sheet.addCell(new Label(11, 0, "INVOICE DATE"));
            
            int size = caList.size();
            int b2bctinSize = 1;
            for(int i = 0;i<size;i++){
                CAModel model = caList.get(i);
                
                //GENERAL DETAILS
                sheet.addCell(new Label(0, b2bctinSize, model.getGstin()));
                sheet.addCell(new Label(1, b2bctinSize, model.getFp()));
                sheet.addCell(new Label(2, b2bctinSize, model.getFiling_typ()));
                sheet.addCell(new Label(3, b2bctinSize, String.valueOf(model.getGt())));
                sheet.addCell(new Label(4, b2bctinSize, String.valueOf(model.getCur_gt())));
                
                //B2B - CTIN AND ITEM DETAILS (CGST,SGST,RATE,TAXABLE AMOUNT)
                int b2bSize = model.getB2b().size();
                for(int j = 0;j<b2bSize;j++){
                    b2b b2bModel = model.getB2b().get(j);
                    
                    //ctin
                    sheet.addCell(new Label(5, b2bctinSize, b2bModel.getCtin()));
                    
                    //itemDetails
                    ItemDetails iDetails = b2bModel.getInv().get(0).getItms().get(0).getItm_det();
                    sheet.addCell(new Label(6, b2bctinSize, String.valueOf(iDetails.getSamt())));
                    sheet.addCell(new Label(7, b2bctinSize, String.valueOf(iDetails.getRt())));
                    sheet.addCell(new Label(8, b2bctinSize, String.valueOf(iDetails.getTxval())));
                    sheet.addCell(new Label(9, b2bctinSize, String.valueOf(iDetails.getCamt())));
                    
                    //invoice value and date
                    sheet.addCell(new Label(10, b2bctinSize, String.valueOf(b2bModel.getInv().get(0).getVal())));
                    sheet.addCell(new Label(11, b2bctinSize, b2bModel.getInv().get(0).getIdt()));
                    b2bctinSize++;
                }
            }
            
            workbook.write();
            workbook.close();
            
            JOptionPane.showMessageDialog(this, "Excel is created in D:/CAFILE/"+fileName+".xls");
            
       }catch(Exception e){
           System.out.println(e.toString());
           JOptionPane.showMessageDialog(this, e.getMessage());
       }
    }
    
    private void createDirIfNot() {
        File theDir = new File("D://CAFILE");

        // if the directory does not exist, create it
        if (!theDir.exists()) {
            boolean result = false;

            try{
                theDir.mkdir();
                result = true;
            } 
            catch(SecurityException se){
                //handle it
                JOptionPane.showMessageDialog(this, se.toString());
            }        
            if(result) {
                System.out.println("DIR created");  
            }
        }
    }

    private String createFileName() {
        Random random = new Random();
        return random.nextInt(10000)+"_CA";
    }
    
    private String getFileExtension(String fileName) {
        if(fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
        return fileName.substring(fileName.lastIndexOf(".")+1);
        else return "";
    }
    
    private boolean isJson(String fileName){
        System.out.println(getFileExtension(fileName));
        String file_extension = getFileExtension(fileName);
        if(file_extension.equalsIgnoreCase("json"))
            return true;
        else return false;
    }
}
